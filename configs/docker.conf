# spark master
mist.context-defaults.spark-conf = {
  spark.master = "local[*]"
}

mist.http.on = true
mist.http.host = "0.0.0.0"
mist.http.port = 2003
mist.http.router-config-path = "configs/router.conf"

mist.mqtt.on = false
mist.mqtt.host = "mosquitto"
mist.mqtt.port = 1883
mist.mqtt.subscribe-topic = "foo"
mist.mqtt.publish-topic = "foo"

mist.recovery.on = false
mist.recovery.multilimit = 10
mist.recovery.typedb = "MapDb"
mist.recovery.dbfilename = "file.db"

mist.workers.runner = "local" # or "local", or "docker"
mist.workers.docker-host = "localhost" # default for unix socker
mist.workers.docker-port = 80
mist.workers.cmd = """${MIST_HOME}/bin/mist start worker --runner local --namespace $MIST_WORKER_NAMESPACE --config $MIST_WORKER_CONFIG --jar $MIST_WORKER_JAR_PATH --run-options $MIST_WORKER_RUN_OPTIONS"""

mist.context.foo.timeout = 100 days

mist.context-defaults.disposable = false

mist.context.streaming.timeout = Inf

mist.context-settings.onstart = ["_regression"]

#mist.context.trainer-namespace-5.run-options = "--packages io.circe:circe-core_2.11:0.6.1,io.circe:circe-generic_2.11:0.6.1,io.circe:circe-parser_2.11:0.6.1"
#mist.context.trainer-namespace-6.run-options = "--packages io.circe:circe-core_2.11:0.6.1,io.circe:circe-generic_2.11:0.6.1,io.circe:circe-parser_2.11:0.6.1"

mist.context.foo.spark-conf = {
  spark.default.parallelism = 4
  spark.driver.memory = "128m"
  spark.executor.memory = "64m"
  spark.scheduler.mode = "FAIR"
}

mist.akka {
  remote {
    log-remote-lifecycle-events = off
    log-recieved-messages = off
    netty.tcp {
      hostname = ""
    }
    transport-failure-detector {
      heartbeat-interval = 30s
      acceptable-heartbeat-pause = 5s
    }
  }
  # Event handlers to register at boot time (Logging$DefaultLogger logs to STDOUT)
  loggers = ["akka.event.Logging$DefaultLogger"]
  cluster {
    seed-nodes = ["akka.tcp://mist@172.17.0.5:2551"]
    auto-down-unreachable-after = 10s
  }
}
