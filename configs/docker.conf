# docker run -v /var/run/docker.sock:/var/run/docker.sock -p 1234:1234 --link mosquitto-${SPARK_VERSION}:mosquitto --link hdfs-${SPARK_VERSION}:hdfs -v $PWD:/usr/share/mist hydrosphere/mist:tests-${SPARK_VERSION} mist --config configs/docker.conf

# spark master
mist.context-defaults.spark-conf = {
  spark.master = "local[*]"
}

mist.http.on = true
mist.http.host = "0.0.0.0"
mist.http.port = 1234
mist.http.router-config-path = "/usr/share/mist/configs/router.conf"

#mist.mqtt.on = true
#mist.mqtt.host = "mosquitto"
#mist.mqtt.port = 1883
#mist.mqtt.subscribe-topic = "swirlish_sub"
#mist.mqtt.publish-topic = "swirlish_pub"

mist.recovery.on = true
mist.recovery.multilimit = 10
mist.recovery.typedb = "MapDb"
mist.recovery.dbfilename = "file.db"

mist.workers.runner = "local" # or "local"
mist.workers.host = "localhost" # default for unix socker
mist.workers.port = 80

mist.context.streaming.timeout = Inf
mist.context.streaming.run-options = "--packages org.apache.bahir:spark-streaming-twitter_2.11:2.0.0"

mist.context.streaming1.timeout = Inf
mist.context.streaming1.run-options = "--packages org.apache.bahir:spark-streaming-twitter_2.11:2.0.0"


mist.akka {
  remote {
    log-remote-lifecycle-events = off
    log-recieved-messages = off
    netty.tcp {
      hostname = ""
    }
    transport-failure-detector {
      heartbeat-interval = 30s
      acceptable-heartbeat-pause = 5s
    }
  }
  # Event handlers to register at boot time (Logging$DefaultLogger logs to STDOUT)
  loggers = ["akka.event.Logging$DefaultLogger"]
  cluster {
    seed-nodes = ["akka.tcp://mist@172.17.0.4:2551"]
    auto-down-unreachable-after = 10s
  }
}
