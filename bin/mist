#!/usr/bin/env bash

export MIST_HOME="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../" && pwd )"

read -d '' help <<- EOF
MIST â€“ is a thin service on top of Spark which makes it possible to execute Scala & Python Spark Jobs from application layers and get synchronous, asynchronous, and reactive results as well as provide an API to external clients.

Usage:
  ./mist start master [--config <config_file>] [--jar <mist_assembled_jar>]
  ./mist stop

Report bugs to: https://github.com/hydrospheredata/mist/issues
Up home page: http://hydrosphere.io
EOF


if [ "$1" == "--help" ] || [ "$1" == "-h" ] || [ "$2" == "--help" ] || [ "$2" == "-h" ]
then
    echo "${help}"
    exit 0
fi

if [ "${SPARK_HOME}" == '' ] || [ ! -d "${SPARK_HOME}" ]
then
    echo "SPARK_HOME is not set"
    exit 1
fi

cmd=$1
app=$2

shift
shift
while [[ $# > 1 ]]
do
    key="$1"

  case ${key} in
    --namespace)
      NAMESPACE="$2"
      shift
      ;;

    --config)
      CONFIG_FILE="$2"
      shift
      ;;

    --jar)
      JAR_FILE="$2"
      shift
      ;;
    
    --runner)
      RUNNER="$2"
      shift
      ;;

    --host)
      HOST="$2"
      shift
      ;;

    --port)
      PORT="$2"
      shift
      ;;
  esac

shift
done

if [ "${cmd}" == 'start' ]
then

    if [ "${CONFIG_FILE}" == '' ]
    then
        CONFIG_FILE="${MIST_HOME}/configs/default.conf"
    fi

    if [ "${JAR_FILE}" == '' ]
    then
        MAX_VERSION=0
        MAX_VERSION_FILE=""
        for jar in `readlink -f ${MIST_HOME}/target/scala-2.*/mist-assembly-0.*`
        do
            a=$(echo ${jar} | sed 's|${1}/mist-assembly-\([0-9]\{1,\}\).\([0-9]\{1,\}\).\([0-9]\{1,\}\).*|\1\2\3|')
            if [[ ${a} > ${MAX_VERSION} ]]
            then
                MAX_VERSION=${a}
                MAX_VERSION_FILE=${jar}
            fi
        done

        JAR_FILE=${MAX_VERSION_FILE}
    fi

    if [ "${CONFIG_FILE}" == '' ] || [ "${JAR_FILE}" == '' ]
    then
        echo "${help}"
        exit 1
    fi

    if [ "${app}" == 'worker' ]
    then
        if [ "${NAMESPACE}" == '' ]
        then
            echo "You must specify --namespace to run Mist worker"
            exit 3
        fi
        if [ "${RUNNER}" == 'local' ]
        then 
            ${SPARK_HOME}/bin/spark-submit --class io.hydrosphere.mist.Worker --driver-java-options "-Dconfig.file=${CONFIG_FILE}" "$JAR_FILE" ${NAMESPACE}
        elif [ "${RUNNER}" == 'docker' ]
        then
            if [ "${HOST}" == 'localhost' ] || [ "${HOST}" == '127.0.0.1' ]
            then 
                export parentContainer=`curl -X GET --unix-socket /var/run/docker.sock -H "Content-Type: application/json" http://${HOST}:${PORT}/containers/$HOSTNAME/json`
                export name=`echo $parentContainer | jq -r '.Name'`
                export image=`echo $parentContainer | jq -r '.Config.Image'`
                export links="[\"$name:/master\"]"
                export labels=`echo $parentContainer | jq -r '.Config.Labels'`
                export config=`base64 -w 0 configs/docker.conf` 
                export request="{
                    \"Image\":\"$image\",
                    \"Cmd\": [
                        \"worker\",
                        \"$NAMESPACE\",
                        \"$config\"
                    ],
                    \"Labels\": $labels,
                    \"HostConfig\": {
                        \"Links\": $links
                    }
                }"
                export containerId=`curl -X POST --unix-socket /var/run/docker.sock -H "Content-Type: application/json" http://${HOST}:${PORT}/containers/create -d "$request" | jq -r '.Id'`
                curl -X POST --unix-socket /var/run/docker.sock -H "Content-Type: application/json" http://${HOST}:${PORT}/containers/$containerId/start
            else
                export parentContainer=`curl -X GET -H "Content-Type: application/json" http://${HOST}:${PORT}/containers/$HOSTNAME/json`
                export name=`echo $parentContainer | jq -r '.Name'`
                export image=`echo $parentContainer | jq -r '.Config.Image'`
                export links="[\"$name:/master\"]"
                export labels=`echo $parentContainer | jq -r '.Config.Labels'`
                export config=`base64 -w 0 configs/docker.conf`
                export request="{
                    \"Image\":\"$image\",
                    \"Cmd\": [
                        \"worker\",
                        \"${NAMESPACE}\",
                        \"$config\"
                    ],
                    \"Labels\": $labels,
                    \"HostConfig\": {
                        \"Links\": $links
                    }
                }"
                export containerId=`curl -X POST -H "Content-Type: application/json" http://${HOST}:${PORT}/containers/create -d "$request" | jq -r '.Id'`
                curl -X POST -H "Content-Type: application/json" http://${HOST}:${PORT}/containers/$containerId/start
            fi
        else
            echo "mist.workers.run is wrong"
            exit 3   
        fi 
        exit 0
    fi

    if [ "${app}" == 'master' ]
    then
        ${SPARK_HOME}/bin/spark-submit --class io.hydrosphere.mist.Master --driver-java-options "-Dconfig.file=${CONFIG_FILE}" "$JAR_FILE"
    fi

elif [ "${cmd}" == 'stop' ]
then
    ps -aef | grep "java.*mist-assembly" | awk '{print $2}' | xargs kill
else
    echo "${help}"
fi
