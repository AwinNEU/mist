mist.test.assemblyjar_2_10 = "target/scala-2.10/mist-assembly-0.9.1.jar"
mist.test.assemblyjar_2_11 = "target/scala-2.11/mist-assembly-0.9.1.jar"
mist.test.othercontextname = "testbar"
mist.test.disposable_context_name = "bar"

mist.test.mqtt.sub.name = "testmqttsub"
mist.test.mqtt.pub.name = "testmqttpub"

mist.test.http.url = "http://localhost:2003/jobs"
mist.test.http.url_it = "http://localhost:2004/jobs"

mist.test.examples.path_2_10 = "./examples/target/scala-2.10/mist_examples_2.10-0.8.0.jar"
mist.test.examples.path_2_11 = "./examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar"

mist.test.cli_conf_2_10 = "src/test/resources/cli_2.10.conf"
mist.test.cli_conf_2_11 = "src/test/resources/cli_2.11.conf"

mist.test.rest_ui_2_10 = "src/test/resources/rest_ui_2.10.conf"
mist.test.rest_ui_2_11 = "src/test/resources/rest_ui_2.11.conf"

mist.test.integration_conf = "src/test/resources/integration.conf"

mist.test.http.restificated_url = "http://localhost:2003/api/simple-context"

mist.test.http.rest_ui_url_workers = "http://localhost:2005/internal/workers"
mist.test.http.rest_ui_url_jobs = "http://localhost:2005/internal/jobs"
mist.test.http.rest_ui_url_routers = "http://localhost:2005/internal/routers"

mist.test.request.jar_2_10 = """
  {
    "path": "examples/target/scala-2.10/mist_examples_2.10-0.8.0.jar",
    "className": "SimpleContext$",
    "parameters": {
      "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    },
    "externalId": "12345678",
    "namespace": "foo"
   }
"""
mist.test.request.hdfs_jar_2_10 = """
  {
    "path": "hdfs://hdfs:9000/mist_examples_2.10-0.8.0.jar",
    "className": "SimpleContext$",
    "parameters": {
      "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    },
    "externalId": "12345678",
    "namespace":"foo"
  }
"""
mist.test.request.jar_2_11 = """
  {
    "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
    "className": "SimpleContext$",
    "parameters": {
      "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    },
    "externalId": "12345678",
    "namespace": "foo"
  }
"""
mist.test.request.hdfs_jar_2_11 = """
  {
    "path": "hdfs://hdfs:9000/mist_examples_2.11-0.8.0.jar",
    "className": "SimpleContext$",
    "parameters": {
      "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    },
    "externalId": "12345678",
    "namespace": "foo"
  }
"""
mist.test.request.testerror_2_10 = """
  {
    "path": "examples/target/scala-2.10/mist_examples_2.10-0.8.0.jar",
    "className": "TestError$",
    "parameters": {
      "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    },
    "externalId": "12345678",
    "namespace": "foo"
    }
  """
mist.test.request.testerror_2_11 = """
  {
    "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
    "className":"TestError$",
    "parameters": {
      "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    },
    "externalId": "12345678",
    "namespace": "foo"
  }
"""
mist.test.request.jarother_2_10 = """
  {
    "path": "examples/target/scala-2.10/mist_examples_2.10-0.8.0.jar",
    "className":"SimpleContext$",
    "parameters": {
      "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    },
    "externalId": "12345678",
    "namespace": "testbar"
  }
"""
mist.test.request.jarother_2_11 = """
  {
    "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
    "className":"SimpleContext$",
    "parameters": {
      "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    },
    "externalId": "12345678",
    "namespace": "testbar"
  }
"""
mist.test.request.pyspark = """
  {
    "path": "src/test/python/simple_spark_context.py",
    "className": "SimpleSparkContext",
    "parameters": {
      "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    },
    "externalId": "12345678",
    "namespace": "foo"
  }
"""
mist.test.request.py_mqtt_pub = """
  {
    "path": "src/test/python/mqtt_publish.py",
    "className": "SimpleSparkContext",
    "parameters": {},
    "externalId": "12345678",
    "namespace": "foo"
  }
"""
mist.test.request.sparksql = """
  {
    "path": "examples/target/scala-2.10/mist_examples_2.10-0.8.0.jar",
    "className": "SimpleSQLContext$",
    "parameters": {
      "file": "src/test/resources/SimpleSQLContextData.json"
    },
    "externalId": "12345678",
    "namespace": "foo"
  }
"""
mist.test.request.sparkhive  = """
  {
    "path": "examples/target/scala-2.10/mist_examples_2.10-0.8.0.jar",
    "className": "SimpleHiveContext$",
    "parameters": {
      "file": "src/test/resources/SimpleSQLContextData.json"
    },
    "externalId": "12345678",
    "namespace": "foo"
  }
"""
mist.test.request.pysparksql = """
  {
    "path": "src/test/python/sql_job.py",
    "className": "SQLJob",
    "parameters": {
      "path": "src/test/resources/SimpleSQLContextData.json"
    },
    "externalId": "12345678",
    "namespace": "foo"
  }
"""
mist.test.request.pysparkhive = """
  {
    "path": "src/test/python/hive_job.py",
    "className": "HiveJob",
    "parameters": {
      "path": "src/test/resources/SimpleSQLContextData.json"
    },
    "externalId": "12345678",
    "namespace": "foo"
  }
"""
mist.test.request.sparksession = """
  {
    "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
    "className": "SimpleHiveContext$",
    "parameters": {
      "file": "src/test/resources/SimpleSQLContextData.json"
    },
    "externalId": "12345678",
    "namespace": "foo"
  }
"""
mist.test.request.pysparksession = """
  {
    "path": "src/test/python/session_job.py",
    "className": "SessionJob",
    "parameters":
    {
      "path": "src/test/resources/SimpleSQLContextData.json"
    },
    "externalId": "12345678",
    "namespace": "foo"
  }
"""

mist.test.request.hdfs_python = """
  {
    "path": "hdfs://hdfs:9000/simple_spark_context.py",
    "className": "SimpleSparkContext",
    "parameters": {
      "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    },
    "externalId": "12345678",
    "namespace": "foo"
  }
"""

mist.test.request.pyerror = """
  {
    "path": "src/test/python/test_error.py",
    "className": "TestError",
    "parameters": {
      "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    },
    "externalId": "12345678",
    "namespace": "foo"
  }
"""
mist.test.request.badpath = """
  {
    "path": "/target/scala-2.10/bad.jar",
    "className": "BadclassName$",
    "parameters": {
      "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    },
    "externalId": "12345678",
    "namespace": "foo"
  }
"""
mist.test.request.badextension = """
  {
    "path": "/bad.bad",
    "className": "SimpleContext$",
    "parameters": {
      "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    },
    "externalId": "12345678",
    "namespace": "foo"
  }
"""
mist.test.request.badrequest ="bad request"
mist.test.request.badjson = """...{"TestErrorBadJson":"TestErrorBadJson$"}"""

mist.test.request.testtimeout_2_10 = """
  {
    "path": "examples/target/scala-2.10/mist_examples_2.10-0.8.0.jar",
    "className": "SimpleContext$",
    "parameters": {
      "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    },
    "externalId": "12345678",
    "namespace": "testtimeout"
  }
"""
mist.test.request.testtimeout_2_11 = """
  {
    "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
    "className": "SimpleContext$",
    "parameters": {
      "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    },
    "externalId": "12345678",
    "namespace": "testtimeout"
  }
"""

mist.test.request.disposable_2_10 = """
  {
    "path": "examples/target/scala-2.10/mist_examples_2.10-0.8.0.jar",
    "className": "SimpleContext$",
    "parameters": {
      "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    },
    "externalId": "12345678",
    "namespace": "bar"
  }
"""
mist.test.request.disposable_2_11 = """
  {
    "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
    "className": "SimpleContext$",
    "parameters": {
      "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    },
    "externalId": "12345678",
    "namespace": "bar"
  }
"""
mist.test.request.async-restificated = """
  {
    "route": "simple-context",
    "parameters": {
      "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    }
  }
"""
mist.test.request.restificated = """
  {
    "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
  }
"""

mist.test.ml.binarizer = """
  {
    "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
    "className": "BinarizerJob$",
    "parameters": {
      "modelPath": "src/test/resources/models/binarizer",
      "features": [0.1, 0.1, 5.9]
    },
    "namespace": "Binarizer"
  }
"""

mist.test.ml.pca = """
  {
    "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
    "className": "PCAJob$",
    "parameters": {
      "modelPath": "src/test/resources/models/pca",
      "features": [[2.0, 0.0, 3.0, 4.0, 5.0], [4.0, 0.0, 0.0, 6.0, 7.0]]
    },
    "namespace": "PCA"
  }
"""

mist.test.ml.standardscaler = """
  {
    "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
    "className": "StandardScalerJob$",
    "parameters": {
      "modelPath": "src/test/resources/models/standardscaler",
      "features": [[1.0, 0.0, 1.0, 2.0, 0.0], [2.0, 0.0, 3.0, 4.0, 5.0], [4.0, 0.0, 0.0, 6.0, 7.0]]
    },
    "namespace": "StandardScaler"
  }
"""

mist.test.ml.minmaxscaler = """
  {
    "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
    "className": "MinMaxScalerJob$",
    "parameters": {
      "modelPath": "src/test/resources/models/minmaxscaler",
      "features": [[1.0, 0.0, -1.0], [2.0, 1.5, 1.0], [3.0, 1.1, 3.0]]
    },
    "namespace": "MinMaxScaler"
  }
"""

mist.test.ml.maxabsscaler = """
  {
    "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
    "className": "MaxAbsScalerJob$",
    "parameters": {
      "modelPath": "src/test/resources/models/maxabsscaler",
      "features": [[1.0, 0.0, 1.0], [2.0, 4.0, 5.0], [0.0, 6.0, 7.0]]
    },
    "namespace": "MaxAbsScaler"
  }
"""

mist.test.ml.stringindexer = """
  {
    "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
    "className": "StringIndexerJob$",
    "parameters": {
      "modelPath": "src/test/resources/models/stringindexer",
      "features": ["a", "b", "c"]
    },
    "namespace": "StringIndexer"
  }
"""

mist.test.ml.onehotencoder = """
  {
    "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
    "className": "OneHotEncoderJob$",
    "parameters": {
      "modelPath": "src/test/resources/models/onehotencoder",
      "features": ["a", "b", "c", "a"]
    },
    "namespace": "OneHotEncoder"
  }
"""

mist.test.ml.ngram = """
  {
    "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
    "className": "NgramJob$",
    "parameters": {
      "modelPath": "src/test/resources/models/ngrams",
      "features": [["Provectus", "team", "is", "awesome"]]
    },
    "namespace": "Ngram"
  }
"""

mist.test.ml.stopwordsremover = """
  {
    "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
    "className": "StopWordsRemoverJob$",
    "parameters": {
      "modelPath": "src/test/resources/models/stopwordsremover",
      "features": [["I", "saw", "the", "red", "balloon"], ["Mary", "had", "a", "little", "lamb"]]
    },
    "namespace": "StopWordsRemover"
  }
"""

mist.test.ml.normalizer = """
  {
    "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
    "className": "NormalizerJob$",
    "parameters": {
      "modelPath": "src/test/resources/models/normalizer",
      "features": [[1.0, 0.5, -1.0], [2.0, 1.0, 1.0], [4.0, 10.0, 2.0]]
    },
    "namespace": "Normalizer"
  }
"""

mist.test.ml.polynomialexpansion = """
  {
    "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
    "className": "PolynomialExpansionJob$",
    "parameters": {
      "modelPath": "src/test/resources/models/polynomialexpansion",
      "features": [[2.0,1.0], [0.0,0.0], [3.0,-1.0]]
    },
    "namespace": "PolynomialExpansion"
  }
"""

mist.test.ml.dct = """
  {
    "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
    "className": "DCTJob$",
    "parameters": {
      "modelPath": "src/test/resources/models/dct",
      "features": [[0.0, 1.0, -2.0, 3.0], [-1.0, 2.0, 4.0, -7.0], [14.0, -2.0, -5.0, 1.0]]
    },
    "namespace": "DCT"
  }
"""

# "predictedLabel":"1.0"
mist.test.ml.tree-classifier_1 = """
  {
      "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
      "className": "DTreeClassificationJob$",
      "parameters": {
          "modelPath": "src/test/resources/models/tree-classifier",
          "features": {
              "type": 0,
              "size": 692,
              "indices": [129, 130, 131, 156, 157, 158, 159, 160, 184, 185, 186,
                  187,
                  188, 212, 213, 214, 215, 216, 239, 240, 241, 242, 243,
                  267, 268,
                  269, 270, 294, 295, 296, 297, 298, 322, 323, 324, 325,
                  326, 350,
                  351, 352, 353, 377, 378, 379, 380, 381, 404, 405, 406,
                  407, 408,
                  409, 432, 433, 434, 435, 436, 459, 460, 461, 462, 463,
                  464, 487,
                  488, 489, 490, 491, 514, 515, 516, 517, 518, 519, 542,
                  543, 544,
                  545, 546, 569, 570, 571, 572, 573, 597, 598, 599, 600,
                  625, 626,
                  627, 628, 653, 654, 655, 656
              ],
              "values": [226.0, 247.0, 55.0, 99.0, 248.0, 254.0, 230.0, 30.0,
                  125.0,
                  254.0, 254.0, 254.0, 38.0, 125.0, 254.0, 254.0, 212.0,
                  24.0,
                  18.0, 223.0, 254.0, 252.0, 118.0, 24.0, 254.0, 254.0,
                  239.0,
                  27.0, 195.0, 254.0, 254.0, 93.0, 78.0, 254.0, 254.0,
                  246.0,
                  74.0, 158.0, 254.0, 254.0, 185.0, 41.0, 239.0, 254.0,
                  254.0,
                  43.0, 22.0, 218.0, 254.0, 254.0, 167.0, 9.0, 32.0, 254.0,
                  254.0,
                  254.0, 130.0, 24.0, 187.0, 254.0, 254.0, 234.0, 16.0,
                  189.0,
                  254.0, 254.0, 254.0, 128.0, 64.0, 247.0, 254.0, 255.0,
                  219.0,
                  42.0, 139.0, 254.0, 254.0, 222.0, 40.0, 30.0, 213.0,
                  254.0,
                  235.0, 45.0, 194.0, 254.0, 254.0, 223.0, 194.0, 254.0,
                  254.0,
                  190.0, 194.0, 254.0, 202.0, 27.0
              ]
          }
      },
  "namespace": "DTree"
  }
"""

# "predictedLabel":"0.0"
mist.test.ml.tree-classifier_0 = """
  {
      "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
      "className": "DTreeClassificationJob$",
      "parameters": {
              "modelPath": "src/test/resources/models/tree-classifier",
              "features": {
                  "type": 0,
                  "size": 692,
                  "indices": [151, 152, 153, 154, 155, 177, 178, 179, 180, 181,
                      182, 183,
                      184, 185, 186, 187, 188, 205, 206, 207, 208, 209, 210,
                      211, 212,
                      213, 214, 215, 216, 217, 232, 233, 234, 235, 236, 237,
                      238, 239,
                      240, 241, 242, 243, 244, 245, 259, 260, 261, 262, 263,
                      264, 265,
                      266, 267, 268, 269, 270, 271, 272, 273, 274, 287, 288,
                      289, 290,
                      291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302,
                      315, 316,
                      317, 318, 319, 320, 321, 326, 327, 328, 329, 330, 342,
                      343, 344,
                      345, 346, 347, 348, 349, 356, 357, 358, 359, 370, 371,
                      372, 373,
                      374, 375, 384, 385, 386, 387, 398, 399, 400, 401, 412,
                      413, 414,
                      415, 426, 427, 428, 429, 441, 442, 443, 454, 455, 456,
                      457, 469,
                      470, 471, 482, 483, 484, 485, 496, 497, 498, 499, 510,
                      511, 512,
                      513, 514, 524, 525, 526, 527, 538, 539, 540, 541, 542,
                      543, 552,
                      553, 554, 555, 566, 567, 568, 569, 570, 571, 572, 573,
                      579, 580,
                      581, 582, 583, 595, 596, 597, 598, 599, 600, 601, 602,
                      606, 607,
                      608, 609, 610, 624, 625, 626, 627, 628, 629, 630, 631,
                      632, 633,
                      634, 635, 636, 637, 638, 653, 654, 655, 656, 657, 658,
                      659, 660,
                      661, 662, 663, 664, 684, 685, 686, 687, 688, 689, 690,
                      691
                  ],
                  "values": [56.0, 105.0, 220.0, 254.0, 63.0, 18.0, 166.0,
                      233.0, 253.0,
                      253.0, 253.0, 236.0, 209.0, 209.0, 209.0, 77.0, 18.0,
                      84.0,
                      253.0, 253.0, 253.0, 253.0, 253.0, 254.0, 253.0,
                      253.0, 253.0,
                      253.0, 172.0, 8.0, 57.0, 238.0, 253.0, 253.0, 253.0,
                      253.0,
                      253.0, 254.0, 253.0, 253.0, 253.0, 253.0, 253.0,
                      119.0, 14.0,
                      238.0, 253.0, 253.0, 253.0, 253.0, 253.0, 253.0,
                      179.0, 196.0,
                      253.0, 253.0, 253.0, 253.0, 238.0, 12.0, 33.0, 253.0,
                      253.0,
                      253.0, 253.0, 253.0, 248.0, 134.0, 18.0, 83.0, 237.0,
                      253.0,
                      253.0, 253.0, 14.0, 164.0, 253.0, 253.0, 253.0, 253.0,
                      253.0,
                      128.0, 57.0, 119.0, 214.0, 253.0, 94.0, 57.0, 248.0,
                      253.0,
                      253.0, 253.0, 126.0, 14.0, 4.0, 179.0, 253.0, 248.0,
                      56.0,
                      175.0, 253.0, 253.0, 240.0, 190.0, 28.0, 179.0, 253.0,
                      253.0,
                      173.0, 209.0, 253.0, 253.0, 178.0, 92.0, 253.0, 253.0,
                      208.0,
                      211.0, 254.0, 254.0, 179.0, 135.0, 255.0, 209.0,
                      209.0, 253.0,
                      253.0, 90.0, 134.0, 253.0, 208.0, 209.0, 253.0, 253.0,
                      178.0,
                      2.0, 142.0, 253.0, 208.0, 209.0, 253.0, 253.0, 214.0,
                      35.0,
                      30.0, 253.0, 253.0, 208.0, 165.0, 253.0, 253.0, 253.0,
                      215.0,
                      36.0, 163.0, 253.0, 253.0, 164.0, 18.0, 172.0, 253.0,
                      253.0,
                      253.0, 214.0, 127.0, 7.0, 72.0, 232.0, 253.0, 171.0,
                      17.0, 8.0,
                      182.0, 253.0, 253.0, 253.0, 253.0, 162.0, 56.0, 64.0,
                      240.0,
                      253.0, 253.0, 14.0, 7.0, 173.0, 253.0, 253.0, 253.0,
                      253.0,
                      245.0, 241.0, 239.0, 239.0, 246.0, 253.0, 225.0, 14.0,
                      1.0,
                      18.0, 59.0, 138.0, 224.0, 253.0, 253.0, 254.0, 253.0,
                      253.0,
                      253.0, 240.0, 96.0, 37.0, 104.0, 192.0, 255.0, 253.0,
                      253.0,
                      182.0, 73.0
                  ]
              }
      },
      "namespace": "DTree"
  }
"""

mist.test.ml.tree-regressor_0 = """
  {
      "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
      "className": "DTreeRegressionJob$",
      "parameters": {
              "modelPath": "src/test/resources/models/tree-regressor",
                    "features": {
                        "type": 0,
                        "size": 692,
                        "indices": [121, 122, 123, 124, 125, 126, 127, 149, 150, 151, 152, 153, 154, 155, 156, 157, 176, 177,
                            178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 203, 204, 205, 206, 207, 208, 209, 210, 211,
                            212, 213, 214, 215, 216, 217, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
                            244, 245, 246, 259, 260, 261, 262, 269, 270, 271, 272, 273, 274, 286, 287, 288, 289, 298, 299,
                            300, 301, 302, 303, 314, 315, 316, 317, 328, 329, 330, 331, 342, 343, 344, 345, 356, 357, 358,
                            359, 369, 370, 371, 372, 385, 386, 387, 397, 398, 399, 400, 413, 414, 415, 416, 425, 426, 427,
                            441, 442, 443, 444, 453, 454, 455, 469, 470, 471, 472, 481, 482, 483, 484, 496, 497, 498, 499,
                            509, 510, 511, 512, 523, 524, 525, 526, 527, 537, 538, 539, 540, 541, 542, 549, 550, 551, 552,
                            553, 554, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582,
                            594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 623, 624, 625,
                            626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 653, 654, 655, 656, 657, 658, 659, 660, 661
                        ],
                        "values": [63, 176, 253, 253, 159, 113, 63, 140, 253, 252, 252, 252, 252, 241, 100, 66, 54, 227, 253,
                            252, 252, 252, 252, 253, 252, 239, 181, 57, 38, 224, 252, 253, 226, 246, 252, 252, 253, 252,
                            252, 252, 252, 108, 3, 57, 252, 252, 253, 27, 88, 112, 112, 112, 112, 142, 252, 252, 253, 152,
                            31, 198, 253, 253, 79, 32, 153, 253, 255, 253, 196, 76, 246, 252, 127, 3, 106, 253, 252, 214,
                            28, 194, 252, 252, 112, 143, 252, 252, 193, 225, 252, 217, 37, 38, 234, 252, 223, 63, 240,
                            252, 84, 146, 252, 223, 114, 253, 228, 47, 147, 253, 253, 112, 159, 252, 195, 225, 252, 252,
                            112, 253, 252, 195, 225, 252, 230, 25, 159, 252, 202, 10, 92, 243, 252, 208, 113, 252, 252,
                            161, 79, 253, 252, 220, 37, 114, 253, 253, 253, 174, 63, 26, 128, 253, 255, 253, 133, 12, 228,
                            252, 252, 252, 241, 100, 85, 76, 85, 131, 231, 252, 252, 253, 129, 6, 97, 208, 252, 252, 253,
                            252, 252, 246, 197, 253, 252, 252, 252, 220, 133, 6, 19, 99, 239, 253, 252, 252, 252, 252,
                            253, 252, 245, 223, 99, 63, 112, 112, 221, 252, 252, 253, 127, 87
                        ]
                    }
      },
      "namespace": "DTreeR"
  }
"""

mist.test.ml.tree-regressor_1 = """
  {
      "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
      "className": "DTreeRegressionJob$",
      "parameters": {
              "modelPath": "src/test/resources/models/tree-regressor",
              "features": {
                    "type": 0,
                    "size": 692,
                    "indices": [123, 124, 125, 151, 152, 153, 179, 180, 181, 207, 208, 209, 235, 236, 237, 238, 263, 264,
                        265, 266, 291, 292, 293, 294, 320, 321, 322, 348, 349, 350, 376, 377, 378, 405, 406, 407, 433,
                        434, 435, 461, 462, 463, 489, 490, 491, 492, 517, 518, 519, 520, 545, 546, 547, 548, 573, 574,
                        575, 576, 602, 603, 604, 605, 631, 632, 633, 659, 660, 661
                    ],
                    "values": [32, 253, 31, 32, 251, 149, 32, 251, 188, 32, 251, 188, 32, 251, 228, 59, 32, 253, 253, 95,
                        28, 236, 251, 114, 127, 251, 251, 127, 251, 251, 48, 232, 251, 223, 253, 159, 221, 251, 158,
                        142, 251, 158, 64, 251, 242, 55, 64, 251, 253, 161, 64, 253, 255, 221, 16, 181, 253, 220, 79,
                        253, 236, 63, 213, 251, 126, 96, 251, 126
                    ]
                }
      },
      "namespace": "DTreeR"
  }
"""

# "predictedLabel":"1.0"
mist.test.ml.forest-classifier_1 = """
{
    "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
    "className": "RandomForestClassificationJob$",
    "parameters": {
        "modelPath": "src/test/resources/models/forest-classifier",
        "features": {
        "type": 0,
        "size": 692,
        "indices": [124, 125, 126, 127, 152, 153, 154, 155, 180, 181, 182, 183,
            208, 209, 210, 211, 236, 237, 238, 239, 264, 265, 266, 267, 292,
            293, 294, 295, 320, 321, 322, 323, 348, 349, 350, 351, 376, 377,
            378, 379, 404, 405, 406, 407, 432, 433, 434, 435, 460, 461, 462,
            463, 488, 489, 490, 491, 516, 517, 518, 519, 544, 545, 546, 547,
            572, 573, 574, 575, 600, 601, 602, 603, 628, 629, 630, 631, 657,
            658, 659
        ],
        "values": [29.0, 85.0, 255.0, 139.0, 197.0, 251.0, 253.0, 251.0, 254.0,
            253.0, 254.0, 253.0, 253.0, 251.0, 253.0, 251.0, 254.0, 253.0,
            254.0, 253.0, 253.0, 251.0, 253.0, 138.0, 254.0, 253.0, 254.0,
            196.0, 253.0, 251.0, 253.0, 196.0, 254.0, 253.0, 254.0, 84.0,
            253.0, 251.0, 253.0, 196.0, 254.0, 253.0, 254.0, 253.0, 253.0,
            251.0, 253.0, 251.0, 254.0, 253.0, 254.0, 253.0, 253.0, 251.0,
            253.0, 251.0, 254.0, 253.0, 254.0, 253.0, 253.0, 251.0, 253.0,
            251.0, 254.0, 253.0, 254.0, 253.0, 253.0, 251.0, 253.0, 251.0,
            57.0, 225.0, 254.0, 253.0, 56.0, 253.0, 251.0
        ]
      }
    },
    "namespace": "RandomForest"
}
"""

# "predictedLabel":"0.0"
mist.test.ml.forest-classifier_0 = """
{
    "path": "examples/target/scala-2.11/mist_examples_2.11-0.8.0.jar",
    "className": "RandomForestClassificationJob$",
    "parameters": {
        "modelPath": "src/test/resources/models/forest-classifier",
        "features": {
            "type": 0,
            "size": 692,
            "indices": [153, 154, 155, 156, 157, 158, 159, 160, 161, 179, 180,
                181,
                182, 183, 184, 185, 186, 187, 188, 189, 190, 206, 207, 208,
                209,
                210, 211, 212, 213, 214, 215, 216, 217, 218, 232, 233, 234,
                235,
                236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 260,
                261,
                262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
                274,
                287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
                299,
                300, 301, 302, 315, 316, 317, 318, 319, 320, 321, 323, 324,
                325,
                326, 327, 328, 329, 330, 342, 343, 344, 345, 346, 354, 355,
                356,
                357, 358, 370, 371, 372, 373, 374, 382, 383, 384, 385, 386,
                398,
                399, 400, 401, 402, 410, 411, 412, 413, 414, 425, 426, 427,
                428,
                429, 439, 440, 441, 442, 453, 454, 455, 456, 467, 468, 469,
                470,
                481, 482, 483, 484, 495, 496, 497, 498, 508, 509, 510, 511,
                512,
                521, 522, 523, 524, 525, 526, 537, 538, 539, 540, 549, 550,
                551,
                552, 553, 565, 566, 567, 568, 576, 577, 578, 579, 580, 581,
                593,
                594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605,
                606,
                607, 608, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
                631,
                632, 633, 634, 650, 651, 652, 653, 654, 655, 656, 657, 658,
                659,
                660, 661, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
                688,
                689
            ],
            "values": [46.0, 105.0, 254.0, 254.0, 254.0, 254.0, 255.0, 239.0,
                41.0,
                37.0, 118.0, 222.0, 254.0, 253.0, 253.0, 253.0, 253.0,
                253.0,
                253.0, 211.0, 54.0, 14.0, 200.0, 253.0, 253.0, 254.0, 253.0,
                253.0, 253.0, 253.0, 253.0, 253.0, 253.0, 116.0, 16.0,
                160.0,
                236.0, 253.0, 253.0, 253.0, 254.0, 253.0, 253.0, 246.0,
                229.0,
                253.0, 253.0, 253.0, 116.0, 99.0, 253.0, 253.0, 253.0,
                253.0,
                253.0, 254.0, 253.0, 253.0, 213.0, 99.0, 253.0, 253.0,
                253.0,
                116.0, 25.0, 194.0, 253.0, 253.0, 253.0, 253.0, 131.0, 97.0,
                169.0, 253.0, 93.0, 99.0, 253.0, 253.0, 253.0, 116.0, 206.0,
                253.0, 253.0, 251.0, 233.0, 127.0, 9.0, 18.0, 38.0, 3.0,
                15.0,
                171.0, 253.0, 253.0, 116.0, 55.0, 240.0, 253.0, 253.0,
                233.0,
                31.0, 186.0, 253.0, 253.0, 116.0, 176.0, 253.0, 253.0,
                253.0,
                127.0, 99.0, 253.0, 253.0, 253.0, 116.0, 176.0, 253.0,
                253.0,
                131.0, 9.0, 99.0, 253.0, 253.0, 253.0, 116.0, 119.0, 254.0,
                254.0, 232.0, 75.0, 158.0, 254.0, 254.0, 117.0, 118.0,
                253.0,
                253.0, 154.0, 156.0, 253.0, 253.0, 116.0, 118.0, 253.0,
                253.0,
                154.0, 156.0, 253.0, 253.0, 116.0, 46.0, 222.0, 253.0,
                253.0,
                154.0, 7.0, 116.0, 246.0, 253.0, 180.0, 9.0, 118.0, 253.0,
                253.0, 154.0, 116.0, 253.0, 253.0, 253.0, 174.0, 118.0,
                253.0,
                253.0, 154.0, 110.0, 246.0, 253.0, 253.0, 240.0, 67.0,
                118.0,
                253.0, 253.0, 238.0, 215.0, 49.0, 20.0, 20.0, 20.0, 66.0,
                215.0,
                241.0, 253.0, 245.0, 233.0, 64.0, 82.0, 229.0, 253.0, 253.0,
                253.0, 253.0, 253.0, 253.0, 253.0, 254.0, 253.0, 253.0,
                240.0,
                107.0, 176.0, 253.0, 253.0, 253.0, 253.0, 253.0, 253.0,
                253.0,
                254.0, 253.0, 253.0, 108.0, 40.0, 239.0, 253.0, 253.0,
                253.0,
                253.0, 253.0, 253.0, 254.0, 161.0, 57.0, 4.0
            ]
        }
    },
    "namespace": "RandomForest"
}
"""